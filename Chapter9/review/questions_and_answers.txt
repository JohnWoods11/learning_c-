?? What are the two parts of a class, as described in this chapter?

// The interface and the implementation. 
//////////////////////////////////////////////////////////////////////////////////////////


?? What is rthe difference between the interface and implementation in a class?

// The interface is what the user interacts with directly and the implementation is the execution of the class that a user interacts with
// indirectly through the interface.
//////////////////////////////////////////////////////////////////////////////////////////


?? What are the problems of the original Date struct that is created in the chapter?

// The members of the struct are public so users can directly change the data members without using the helper functions which could lead
// to invalid dates.
/////////////////////////////////////////////////////////////////////////////////////////


?? Why is a constructor used for the Date type instead of an init_day() function?

// Because the data members are initialised when the object is created using a costructor. Using the init_day() function to initialise means the 
// data members could be used before they have been initialised or the user could even forget to initialise it.
/////////////////////////////////////////////////////////////////////////////////////////


?? What is an invariant? Give an example.

// The rule that stipulates what makes a valid value. For instance a day must be a Monday, Tuesday, Wednesday, Thursday, Friday, Saturday
// and Sunday.
/////////////////////////////////////////////////////////////////////////////////////////


?? When should functions be put in the class definition and when should they be defined outside the class? Why?

// Only when the function is one or two lines should it be defined in the class definition. Else they should be defined outside the class.
// The reason for defining the one or two line functions within the class definition is because it can be a performance advantage. 
// For larger classes the performance advantage is negligible and they are not included in the class definition so that the class
// definition is easier to read and doesn't become large and messy.
///////////////////////////////////////////////////////////////////////////////////////////


?? When should operator overloading be used in a program? Give a list of operators you might want to overload.

// When you want to define the c++ operators for your own types. This means users can then use these conventionl operators with your types making them
// much moreintuitvie. you can overload binary + and - so that you can add and subtract your types from each other. == and != can be defined to test 
// if your types have the same value or not.
/////////////////////////////////////////////////////////////////////////////////////////////


?? Why should the public interface to a class be as small as possible?

// Because it is directly used by the user and therefore should only contain things that the user needs to use the class, the user shouldn't
// be bogged down by details they don't need.
//////////////////////////////////////////////////////////////////////////////////////////////


?? What does adding const to a member function do?

// It shows that this function does not alter any variables and the compiler will ensure this is the case.
///////////////////////////////////////////////////////////////////////////////////////////////


?? Why are helper functions best place outside the class definition? 

// Because if a function can be implemennted simply and eficiently outside of the class then it shouldn't be in the class. This is because it 
// therefore won't be able to directly corrupt the member data. This means when the member data has been directly corrupted there are less
// suspects and debugging is easier. Also it simplifies the the interface of the class for the user.
////////////////////////////////////////////////////////////////////////////////////////////////